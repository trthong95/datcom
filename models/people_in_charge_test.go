// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPeopleInCharges(t *testing.T) {
	t.Parallel()

	query := PeopleInCharges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPeopleInChargesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeopleInChargesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PeopleInCharges().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeopleInChargesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PeopleInChargeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeopleInChargesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PeopleInChargeExists(ctx, tx, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if PeopleInCharge exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PeopleInChargeExists to return true, but got false.")
	}
}

func testPeopleInChargesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	peopleInChargeFound, err := FindPeopleInCharge(ctx, tx, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if peopleInChargeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPeopleInChargesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PeopleInCharges().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPeopleInChargesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PeopleInCharges().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPeopleInChargesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	peopleInChargeOne := &PeopleInCharge{}
	peopleInChargeTwo := &PeopleInCharge{}
	if err = randomize.Struct(seed, peopleInChargeOne, peopleInChargeDBTypes, false, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}
	if err = randomize.Struct(seed, peopleInChargeTwo, peopleInChargeDBTypes, false, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = peopleInChargeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = peopleInChargeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PeopleInCharges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPeopleInChargesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	peopleInChargeOne := &PeopleInCharge{}
	peopleInChargeTwo := &PeopleInCharge{}
	if err = randomize.Struct(seed, peopleInChargeOne, peopleInChargeDBTypes, false, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}
	if err = randomize.Struct(seed, peopleInChargeTwo, peopleInChargeDBTypes, false, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = peopleInChargeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = peopleInChargeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func peopleInChargeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func peopleInChargeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func peopleInChargeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func peopleInChargeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func peopleInChargeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func peopleInChargeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func peopleInChargeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func peopleInChargeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func peopleInChargeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PeopleInCharge) error {
	*o = PeopleInCharge{}
	return nil
}

func testPeopleInChargesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PeopleInCharge{}
	o := &PeopleInCharge{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge object: %s", err)
	}

	AddPeopleInChargeHook(boil.BeforeInsertHook, peopleInChargeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	peopleInChargeBeforeInsertHooks = []PeopleInChargeHook{}

	AddPeopleInChargeHook(boil.AfterInsertHook, peopleInChargeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	peopleInChargeAfterInsertHooks = []PeopleInChargeHook{}

	AddPeopleInChargeHook(boil.AfterSelectHook, peopleInChargeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	peopleInChargeAfterSelectHooks = []PeopleInChargeHook{}

	AddPeopleInChargeHook(boil.BeforeUpdateHook, peopleInChargeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	peopleInChargeBeforeUpdateHooks = []PeopleInChargeHook{}

	AddPeopleInChargeHook(boil.AfterUpdateHook, peopleInChargeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	peopleInChargeAfterUpdateHooks = []PeopleInChargeHook{}

	AddPeopleInChargeHook(boil.BeforeDeleteHook, peopleInChargeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	peopleInChargeBeforeDeleteHooks = []PeopleInChargeHook{}

	AddPeopleInChargeHook(boil.AfterDeleteHook, peopleInChargeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	peopleInChargeAfterDeleteHooks = []PeopleInChargeHook{}

	AddPeopleInChargeHook(boil.BeforeUpsertHook, peopleInChargeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	peopleInChargeBeforeUpsertHooks = []PeopleInChargeHook{}

	AddPeopleInChargeHook(boil.AfterUpsertHook, peopleInChargeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	peopleInChargeAfterUpsertHooks = []PeopleInChargeHook{}
}

func testPeopleInChargesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeopleInChargesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(peopleInChargeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeopleInChargeToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PeopleInCharge
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, peopleInChargeDBTypes, false, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PeopleInChargeSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*PeopleInCharge)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPeopleInChargeToOneMenuUsingMenu(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PeopleInCharge
	var foreign Menu

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, peopleInChargeDBTypes, false, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, menuDBTypes, false, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MenuID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Menu().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PeopleInChargeSlice{&local}
	if err = local.L.LoadMenu(ctx, tx, false, (*[]*PeopleInCharge)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Menu == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Menu = nil
	if err = local.L.LoadMenu(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Menu == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPeopleInChargeToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PeopleInCharge
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peopleInChargeDBTypes, false, strmangle.SetComplement(peopleInChargePrimaryKeyColumns, peopleInChargeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PeopleInCharge != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := PeopleInChargeExists(ctx, tx, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testPeopleInChargeToOneSetOpMenuUsingMenu(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PeopleInCharge
	var b, c Menu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peopleInChargeDBTypes, false, strmangle.SetComplement(peopleInChargePrimaryKeyColumns, peopleInChargeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Menu{&b, &c} {
		err = a.SetMenu(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Menu != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PeopleInCharges[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MenuID != x.ID {
			t.Error("foreign key was wrong value", a.MenuID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MenuID))
		reflect.Indirect(reflect.ValueOf(&a.MenuID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MenuID != x.ID {
			t.Error("foreign key was wrong value", a.MenuID, x.ID)
		}
	}
}

func testPeopleInChargesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeopleInChargesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PeopleInChargeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeopleInChargesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PeopleInCharges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	peopleInChargeDBTypes = map[string]string{`UserID`: `integer`, `MenuID`: `integer`}
	_                     = bytes.MinRead
)

func testPeopleInChargesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(peopleInChargePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(peopleInChargeColumns) == len(peopleInChargePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPeopleInChargesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(peopleInChargeColumns) == len(peopleInChargePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PeopleInCharge{}
	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, peopleInChargeDBTypes, true, peopleInChargePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(peopleInChargeColumns, peopleInChargePrimaryKeyColumns) {
		fields = peopleInChargeColumns
	} else {
		fields = strmangle.SetComplement(
			peopleInChargeColumns,
			peopleInChargePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PeopleInChargeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPeopleInChargesUpsert(t *testing.T) {
	t.Parallel()

	if len(peopleInChargeColumns) == len(peopleInChargePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PeopleInCharge{}
	if err = randomize.Struct(seed, &o, peopleInChargeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PeopleInCharge: %s", err)
	}

	count, err := PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, peopleInChargeDBTypes, false, peopleInChargePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PeopleInCharge struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PeopleInCharge: %s", err)
	}

	count, err = PeopleInCharges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
